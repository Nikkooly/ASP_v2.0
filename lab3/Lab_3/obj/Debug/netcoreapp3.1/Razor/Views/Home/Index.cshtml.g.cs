#pragma checksum "F:\University\4-1\ASP.NET\labs\lab3\Lab_3\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f0e26355f307d32bfc61f1004d52f7ff0b9976ce"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f0e26355f307d32bfc61f1004d52f7ff0b9976ce", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f0e26355f307d32bfc61f1004d52f7ff0b9976ce2693", async() => {
                WriteLiteral(@"
    <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
    <title>index</title>
    <meta charset=""utf-8"" />
    <style type=""text/css"">
        table {
            font-family: ""Lucida Sans Unicode"", ""Lucida Grande"", Sans-Serif;
            text-align: left;
            border-collapse: separate;
            border-spacing: 5px;
            background: #ECE9E0;
            color: #656665;
            border: 16px solid #ECE9E0;
            border-radius: 20px;
        }

        th {
            font-size: 18px;
            padding: 10px;
        }

        td {
            background: #F5D7BF;
            padding: 10px;
        }
        input.green {
            border-radius: 4px;
            -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.08);
            -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.08);
            box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba");
                WriteLiteral(@"(0, 0, 0, 0.08);
            color: #fff;
            display: block;
            width: auto;
            text-align: center;
            font-family: Arial, Helvetica, sans-serif;
            font-size: 14px;
            padding: 8px 16px;
            margin: 20px auto;
            text-decoration: none;
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.075);
            -webkit-transition: background-color 0.1s linear;
            -moz-transition: background-color 0.1s linear;
            -o-transition: background-color 0.1s linear;
            transition: background-color 0.1s linear;
        }

        input.green {
            background-color: rgb( 43, 153, 91 );
            border: 1px solid rgb( 33, 126, 74 );
        }

            input.green:hover {
                background-color: rgb( 75, 183, 141 );
            }

    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f0e26355f307d32bfc61f1004d52f7ff0b9976ce5611", async() => {
                WriteLiteral(@"
    <table style=""border: 1px solid black; padding: 5px; margin: 5px;"">

        <tr>
            <td>id</td>
            <td><input type=""text"" id=""id"" /></td>
        </tr>

        <tr>
            <td>sort</td> <!--сортировка по Name-->
            <td><input type=""text"" id=""sort"" /></td>
        </tr>
        <!--смещение в списке (если не указан sort -  автоматическая сортировка по ID, если указан, то по NAME), для постраничного вывода-->
        <tr>
            <td>offset</td>
            <td><input type=""text"" id=""offset"" /></td>
        </tr>
        <!--limit – максимальное количество, возвращаемых элементов списка-->
        <tr>
            <td>limit</td>
            <td><input type=""text"" id=""limit"" /></td>
        </tr>
        <!--minid – минимальный идентификатор-->
        <tr>
            <td>minid</td>
            <td><input type=""text"" id=""minid"" /></td>
        </tr>
        <!--maxid – максимальный идентификатор-->
        <tr>
            <td>maxid</td>
 ");
                WriteLiteral(@"           <td><input type=""text"" id=""maxid"" /></td>
        </tr>
        <!--like – шаблон по полю NAME-->
        <tr>
            <td>like</td>
            <td><input type=""text"" id=""like"" /></td>
        </tr>
        <!--globalike – like-шаблон для строк с конкатенации ID, NAME, PHONE-->
        <tr>
            <td>global_like</td>
            <td><input type=""text"" id=""global_like"" /></td>
        </tr>

        <tr>
            <td>Select columns</td>
            <td><input type=""text"" id=""select"" /></td>
        </tr>

    </table>

    <div style=""padding: 5px; margin: 5px"">
        <input style=""margin: 5px"" class=""green"" type=""button"" id=""getSts"" onclick=""getStudents()"" value=""Get students"" />
        <input style=""margin: 5px"" type=""button"" class=""green"" id=""getSt"" onclick=""getStudentById()"" value=""Get student"" />
    </div>

    <div>
        <table style=""border: 1px solid red; padding: 5px; margin: 5px;"">
            <tr>
                <td>Фамилия</td>
         ");
                WriteLiteral(@"       <td><input type=""text"" id=""surname-post"" /></td>
            </tr>
            <tr>
                <td>Имя</td>
                <td><input type=""text"" id=""name-post"" /></td>
            </tr>
            <tr>
                <td>Отчество</td>
                <td><input type=""text"" id=""patronymic-post"" /></td>
            </tr>
            <tr>
                <td>Телефон</td>
                <td><input type=""text"" id=""phone-post"" /></td>
            </tr>
        </table>
        <div style=""padding: 5px; margin: 5px;"">
            <input type=""button"" class=""green"" onclick=""createStudent()"" value=""Add student"" />
        </div>
    </div>

    <table id=""tbl"" style=""border: 1px solid black""></table>

    <div id=""ans""></div>


    <script type=""text/javascript"">
        function createStudent() {
            let link = ""http://localhost:59508/students/add.json"";
            let data = {
                ""Surname"": document.getElementById('surname-post').value,
           ");
                WriteLiteral(@"     ""Name"": document.getElementById('name-post').value,
                ""Patronymic"": document.getElementById('patronymic-post').value,
                ""Phone"": document.getElementById('phone-post').value
            }
            fetch(link,
                {
                    method: 'POST',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(text => text.json()).then(result => {
                    if (result.rel) {
                        onError(result);
                        return;
                    }
                    getStudents();
                }).catch(error => {
                    let html = ""<div><b>Error"" + error.status + ""</b></div>"";
                    document.getElementById('ans').innerHTML = html;
                });
        }

        function getStudents() {
            let link = ""http://localhost:59508/students/get.json?");
                WriteLiteral(@""";
            let x = document.getElementById('minid').value;
            if (!isNaN(x))
                link += ""MinId="" + x + ""&"";
            x = document.getElementById('maxid').value;
            if (!isNaN(x))
                link += ""MaxId="" + x + ""&"";
            x = document.getElementById('limit').value;
            if (!isNaN(x))
                link += ""Limit="" + x + ""&"";
            x = document.getElementById('offset').value;
            if (!isNaN(x))
                link += ""Offset="" + x + ""&"";
            x = document.getElementById('like').value;
            if (x !== '')
                link += ""Like="" + x + ""&"";
            x = document.getElementById('global_like').value;
            if (x !== '')
                link += ""GlobalLike="" + x + ""&"";
            x = document.getElementById('select').value;
            if (x !== '')
                link += ""SelectColumns="" + x +"",Hateoas,Id""+ ""&"";
            x = document.getElementById('sort').value;
            if (isN");
                WriteLiteral(@"aN(x))
                link += ""SortByName="" + x + ""&"";
            fetch(link, {
                method: 'GET'
            }).then(text => text.json()).then(result => {
                let html = """";
                result.forEach(r => {
                    html += ""<tr><td>"" + r.id + ""</td>"";
                    if (r.surname)
                        html += ""<td><input type='text' id='surname"" + r.id + ""' value='"" + r.surname + ""' /></td>"";
                    if (r.name)
                        html += ""<td><input type='text' id='name"" + r.id + ""' value='"" + r.name + ""' /></td>"";
                    if (r.patronymic)
                        html += ""<td><input type='text' id='patronymic"" + r.id + ""' value='"" + r.patronymic + ""' /></td>"";
                    if (r.phone)
                        html += ""<td><input type='text' id='phone"" + r.id + ""' value='"" + r.phone + ""' /></td>"";
                    html += ""<td style='color: green'>"" + r.hateoas.rel + ""</td>"" +
                        """);
                WriteLiteral(@"<td><a href = '"" + r.hateoas.href + ""'>get json<a/></td>"" +
                        ""<td><a href = '"" + r.hateoas.href.substr(0, r.hateoas.href.length - 4) + 'xml' + ""'>get xml<a/></td>"" +
                        ""<td><button onclick = 'updateStudent(`"" + r.id + ""`)'>update</button></td>"" +
                        ""<td><button onclick = 'deleteStudent(`"" + r.id + ""`)'>delete</button></td>"" +
                        ""</tr>"";
                });
                document.getElementById('tbl').innerHTML = html;
            });
        }

        function getStudentById() {
            let id = parseInt(document.getElementById('id').value);
            if (isNaN(id))
                id = 0;
            let link = ""http://localhost:59508/students/student/"".concat(id).concat("".json"");
            fetch(link, {
                method: 'GET'
            }).then(text => text.json()).then(result => {
                if (result.rel) {
                    onError(result);
                    return;
 ");
                WriteLiteral(@"               }
                let html = ""<div><b>Student by id:"" + result.id + "" Name:"" + result.name + ""</b></div><div><b>Links to student: </b><a href="" + result.hateoas.href + "">json</a><b>     </b><a href='"" + result.hateoas.href.substr(0, result.hateoas.href.length - 4) + 'xml' + ""'>xml</a></div>"";
                document.getElementById('ans').innerHTML = html;
            }).catch(error => {
                let html = ""<div><b>Error"" + error.status + ""</b></div>"";
                document.getElementById('ans').innerHTML = html;
            });
        }

        function onError(error) {
            let html = ""<div><b>Error</b></div><div><a href='"" + error.href + ""'>"" + error.rel + ""</a></div>"";
            document.getElementById('ans').innerHTML = html;
        }

        function updateStudent(id) {
            let link = ""http://localhost:59508/students/update.json"";
            let data = {
                ""Id"": parseInt(id),
                ""Surname"": document.getElementByI");
                WriteLiteral(@"d('surname'.concat(id))?.value,
                ""Name"": document.getElementById('name'.concat(id))?.value,
                ""Patronymic"": document.getElementById('patronymic'.concat(id))?.value,
                ""Phone"": document.getElementById('phone'.concat(id))?.value
            }
            fetch(link,
                {
                    method: 'PUT',
                    body: JSON.stringify(data),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(text => text.json()).then(result => {
                    if (result.rel) {
                        onError(result);
                        return;
                    }
                    getStudents();
                }).catch(error => {
                    let html = ""<div><b>Error"" + error.status + ""</b></div>"";
                    document.getElementById('ans').innerHTML = html;
                });
        }

        function deleteStudent(id) ");
                WriteLiteral(@"{
            let link = ""http://localhost:59508/students/delete/"".concat(id).concat("".json"");
            fetch(link, {
                method: 'DELETE'
            }).then(result => {
                getStudents();
            }).catch(error => {
                let html = ""<div><b>Error"" + error.status + ""</b></div>"";
                document.getElementById('ans').innerHTML = html;
            });
        }
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
